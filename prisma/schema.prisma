// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  phone          String?
  password       String
  affiliateId    String  @unique @default(cuid()) // реферальный код пользователя
  referredBy     String? // кто привел пользователя
  emailVerified  Boolean @default(false)
  metaData       Json?
  balance        Float   @default(0) @db.DoublePrecision
  profitBalance  Float   @default(0) @db.DoublePrecision
  investBalance  Float   @default(0) @db.DoublePrecision
  countryCode    String?
  level1Per      Int     @default(5) // процент с первого уровня
  level2Per      Int     @default(2) // процент со второго уровня
  uLevel1Balance Float   @default(0) @db.DoublePrecision // заработок с 1 уровня
  uLevel2Balance Float   @default(0) @db.DoublePrecision // заработок со 2 уровня

  role Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Реферальная система - связи
  referralRecord  UserReferral?  @relation("UserReferralUser")
  referrals       UserReferral[] @relation("Level1Referral")
  level2Referrals UserReferral[] @relation("Level2Referral")

  orders    Order[]
  withdraws Withdraw[]
  earns     Earn[]

  @@map("users")
}

model UserReferral {
  id       Int  @id @default(autoincrement())
  userId   Int  @unique
  level1Id Int?
  level2Id Int?

  // Связи
  user   User  @relation("UserReferralUser", fields: [userId], references: [id], onDelete: Cascade)
  level1 User? @relation("Level1Referral", fields: [level1Id], references: [id])
  level2 User? @relation("Level2Referral", fields: [level2Id], references: [id])

  @@map("user_referral")
}

enum PaymentMethod {
  CRYPTO
  BANK_TRANSFER
  PAYPAL
}

enum OrderType {
  PLAN
  DEPOSIT
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model Withdraw {
  id             Int           @id @default(autoincrement())
  userId         Int
  invoiceId      String?
  type           PaymentMethod @default(CRYPTO)
  amountPercent  Float         @db.DoublePrecision
  amount         Float         @db.DoublePrecision
  status         String
  paymentDetails Json
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdraws")
}

model Order {
  id             Int           @id @default(autoincrement())
  userId         Int
  invoiceId      String?
  status         OrderStatus   @default(PENDING)
  paymentMethod  PaymentMethod
  type           OrderType
  amount         Float         @db.DoublePrecision
  activePlanData DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User       User       @relation(fields: [userId], references: [id])
  OrderPlans OrderPlan?
  Earns      Earn[]

  @@map("orders")
}

model Plan {
  id           Int    @id @default(autoincrement())
  title        String
  description  String
  percentDaily Float  @db.DoublePrecision
  termDays     Int
  minDeposit   Int
  roi          Float  @db.DoublePrecision

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderPlans OrderPlan[]

  @@map("plans")
}

model OrderPlan {
  id      Int @id @default(autoincrement())
  orderId Int @unique
  planId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order  @relation(fields: [orderId], references: [id])
  Plan  Plan   @relation(fields: [planId], references: [id])
  earns Earn[]

  @@map("orderPlans")
}

model Earn {
  id          Int   @id @default(autoincrement())
  userId      Int
  orderPlanId Int
  amount      Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderPlan OrderPlan @relation(fields: [orderPlanId], references: [id], onDelete: Cascade)
  Order     Order?    @relation(fields: [orderId], references: [id])
  orderId   Int?

  @@map("earns")
}

enum Role {
  ADMIN
  USER
}
